version "4.14"


const HDLD_SATYA="STY";

class VirSatya:HDHandgun{
	default{
		+hdweapon.fitsinbackpack
		+hdweapon.reverseguninertia
		scale 0.54;
		weapon.selectionorder 50;
		weapon.slotnumber 2;
		weapon.slotpriority 2;
		weapon.kickback 40;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		obituary "%o has seen the light, thanks to %k.";
		inventory.pickupmessage "You got the ''Satya'' 8mm Light Cannon!";
		tag "''Satya'' 8mm Light Cannon";
		hdweapon.refid HDLD_SATYA;
		hdweapon.barrelsize 17,0.3,0.5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		weaponspecial=1337;//UaS stabilizer compatibility
	}
	override double weaponbulk(){
		int bat=weaponstatus[SATYA_BATTERY];
		return 47;
	}
	override double gunmass(){
		return 9;
	}
	override void failedpickupunload(){
		failedpickupunloadmag(SATYA_BATTERY,"HDBattery");
	}
	override string,double getpickupsprite(){
		return "STYAP0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int battery=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HDBattery")));
			if(battery>=20){
				sb.drawimage("CELLA0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(battery<1){
				sb.drawimage("CELLD0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:battery?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"CELLB0","CELLD0",
				battery,12,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HDBattery"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		;
		sb.drawwepnum(hdw.weaponstatus[SATYA_BATTERY],20);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTRELOAD.."  Quick-Swap (if available)\n"
		..WEPHELP_RELOAD.."  Reload battery\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		vector2 scc;
		vector2 bobb=bob*1.3;

		sb.SetClipRect(
				-8+bob.x,-9+bob.y,16,15,
				sb.DI_SCREEN_CENTER
			);
			scc=(0.6,0.6);

		sb.drawimage(
			"SATFRNT",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:scc
		);

		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"SATBACK",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:1,
			scale:scc
		);
	}
/*	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HD5MM_AMMO"))owner.A_DropInventory("HD5MM_AMMO",amt*12);
			else owner.A_DropInventory("HDBattery",amt);
		}
	}*/
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("HDBattery");
	}
	
	action void A_CheckPistolHand(){
		if(invoker.wronghand)player.getpsprite(PSP_WEAPON).sprite=getspriteindex("STY2A0");
	}
	states{
	select0:
		STYA A 0{
			if(!countinv("NulledWeapon"))invoker.wronghand=false;
			A_TakeInventory("NulledWeapon");
			A_CheckPistolHand();
		}
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
	deselect0:
		STYA A 0 A_CheckPistolHand();
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;

	ready:
		STYA A 0 A_CheckPistolHand();
		#### # 0 A_SetCrosshair(21);
		#### # 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;

	fire:
		#### A 0{
			if(invoker.weaponstatus[SATYA_BATTERY]>0)setweaponstate("windup");
		}
		#### A 0 A_StartSound("Satya/Nope",CHAN_WEAPON);
		goto nope;
	windup:
		#### A 16 A_StartSound("Satya/Charge",CHAN_WEAPON);
	shoot:
		#### A 1{
			if(invoker.weaponstatus[SATYA_BATTERY]>0)A_GunFlash();
			else setweaponstate("nope");
		}
		#### C 1{
			if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
			}
			A_MuzzleClimb(
				-frandom(1.0,1.2),-frandom(1.4,1.8),
				frandom(0.6,0.7),frandom(0.8,0.95)
			);
		}
		#### C 0{
			A_SpawnItemEx("HDLightPuffRed",
				cos(pitch)*1,3,height-9-sin(pitch)*12,
				-2,3,vel.z,
				0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_SpawnItemEx("HDLightPuffRed",
				cos(pitch)*1,-3,height-9-sin(pitch)*12,
				-2,-3,vel.z,
				0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		#### C 0{
			if(invoker.weaponstatus[SATYA_BATTERY]<1){
				setweaponstate("nope");
			}
		}
		#### B 1{
			if(invoker.weaponstatus[SATYA_DRAINTIK]<3){
				invoker.weaponstatus[SATYA_DRAINTIK]++;			//Increase DrainTik if it's under 3.		-Slogstin
				}
			if (invoker.weaponstatus[SATYA_DRAINTIK]>=3){
				invoker.weaponstatus[SATYA_BATTERY]--;
				invoker.weaponstatus[SATYA_DRAINTIK]=0;			//Decrease Battery by 1 and reset DrainTik
				}												//back to 0 if DrainTik reached 3.			-Slogstin
			}
		#### B 1;
		#### A 9;
		#### A 1{
			A_WeaponReady(WRF_NOFIRE);
			A_Refire("shoot");
		}
		#### A 8 A_StartSound("Satya/Down",CHAN_WEAPON);
		goto ready;
	flash:
		STY2 F 0 A_JumpIf(invoker.wronghand,2);
		STYA F 0;
		---- F 1{
			let bbb=HDBulletActor.FireBullet(self,"HDB_LIGHT",spread:0.15,speedfactor:frandom(0.98,1.02));
			if(
				frandom(0,ceilingz-floorz)<bbb.speed*0.3
			)A_AlertMonsters(400);

			A_ZoomRecoil(0.990);
			A_MuzzleClimb(-frandom(0,0.2),-frandom(0,0.6));
		}
		---- A 0 A_StartSound("Satya/Shoot",CHAN_WEAPON);
		stop;
		
	unload:
		---- A 0{
			invoker.weaponstatus[0]|=SATYA_UNLOAD;
			if(invoker.weaponstatus[SATYA_BATTERY]>=0)setweaponstate("unmag");
		}goto nope;
		
	reload:
		---- A 0{
			invoker.weaponstatus[0]&=~SATYA_UNLOAD;
			bool nobattery=HDMagAmmo.NothingLoaded(self,"HDBattery");
			if(invoker.weaponstatus[SATYA_BATTERY]>=20)setweaponstate("nope");
			else if(invoker.weaponstatus[SATYA_BATTERY]<1 &&(pressinguse() || nobattery));
			else if(nobattery)setweaponstate("nope");
		}goto unmag;
	unmag:
		---- A 1 offset(0,34) A_SetCrosshair(21);
		---- A 2 offset(1,38);
		---- A 3 offset(2,42);
		---- A 4 offset(3,46) A_StartSound("weapons/rifleunload",8,CHANF_OVERLAP);
		---- A 0{
			int pmg=invoker.weaponstatus[SATYA_BATTERY];
			invoker.weaponstatus[SATYA_BATTERY]=-1;
			if(pmg<0)setweaponstate("magout");
			else if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HDBattery",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HDBattery",pmg);
				setweaponstate("magout");
			}
			else{
				HDMagAmmo.GiveMag(self,"HDBattery",pmg);
				A_StartSound("weapons/pocket",9);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		---- A 0{
			if(invoker.weaponstatus[0]&SATYA_UNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		---- A 6 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 0 A_StartSound("weapons/pocket",9);
		---- A 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 4;
		---- A 0{
			let mmm=hdmagammo(findinventory("HDBattery"));
			if(mmm){
				invoker.weaponstatus[SATYA_BATTERY]=mmm.TakeMag(true);
				A_StartSound("weapons/rifleload",8);
			}
		}
		goto reloadend;

	reloadend:
		---- A 3 offset(3,46);
		---- A 2 offset(2,42);
		---- A 1 offset(2,38);
		---- A 1 offset(1,34);
//		---- A 0 A_JumpIf(!(invoker.weaponstatus[0]&SATYA_UNLOAD),"chamber_manual");
		goto nope;
		
	user1:
	altreload:
	swappistols:
		---- A 0 A_SwapHandguns();
		---- A 0{
			bool id=(Wads.CheckNumForName("id",0)!=-1);
			bool offhand=invoker.wronghand;
			bool lefthanded=(id!=offhand);
			if(lefthanded){
				A_Overlay(1025,"raiseleft");
				A_Overlay(1026,"lowerright");
			}else{
				A_Overlay(1025,"raiseright");
				A_Overlay(1026,"lowerleft");
			}
		}
		TNT1 A 5;
		STYA A 0 A_CheckPistolHand();
		goto nope;
	lowerleft:
		STYA A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		STY2 A 0;
		#### B 1 offset(-6,38);
		#### B 1 offset(-12,48);
		#### B 1 offset(-20,60);
		#### B 1 offset(-34,76);
		#### B 1 offset(-50,86);
		stop;
	lowerright:
		STY2 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		STYA A 0;
		#### B 1 offset(6,38);
		#### B 1 offset(12,48);
		#### B 1 offset(20,60);
		#### B 1 offset(34,76);
		#### B 1 offset(50,86);
		stop;
	raiseleft:
		STYA A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		STY2 A 0;
		#### A 1 offset(-50,86);
		#### A 1 offset(-34,76);
		#### A 1 offset(-20,60);
		#### A 1 offset(-12,48);
		#### A 1 offset(-6,38);
		stop;
	raiseright:
		STY2 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		STYA A 0;
		#### A 1 offset(50,86);
		#### A 1 offset(34,76);
		#### A 1 offset(20,60);
		#### A 1 offset(12,48);
		#### A 1 offset(6,38);
		stop;
	whyareyousmiling:
		#### B 1 offset(0,48);
		#### B 1 offset(0,60);
		#### B 1 offset(0,76);
		TNT1 A 7;
		STYA A 0{
			invoker.wronghand=!invoker.wronghand;
			A_CheckPistolHand();
		}
		#### B 1 offset(0,76);
		#### B 1 offset(0,60);
		#### B 1 offset(0,48);
		goto nope;

	spawn:
		STYA P -1;
		stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[SATYA_BATTERY]=20;
		weaponstatus[SATYA_DRAINTIK]=0;
	}
}


enum satyastatus{
	SATYA_BATTERY=20,
	SATYA_DRAINTIK=3,
	SATYA_UNLOAD=1,
};


class HDB_LIGHT:HDBulletActor{
	default{
		pushfactor 0.25;
		mass 60;
		speed 1500;
		accuracy 1000;
		stamina 800;
		woundhealth 18;
		hdbulletactor.hardness 2;
	}
}

class HDLightPuffRed:HDSmoke{
	default{
		scale 0.2;gravity 0.01;alpha 0.75;
		translation "SatyaSmoke";
		hdpuff.fadeafter 12;
		hdpuff.decel 0.96;
		hdpuff.fade 0.885;
		hdpuff.grow 0.1;
		hdpuff.minalpha 0.001;
		hdpuff.startvelz 2.;
		radius 3; height 3;
		+rollsprite
	}
	override void postbeginplay()
		{A_SetRoll(roll+frandom(0,360));hdactor.postbeginplay();}
	states{
	spawn:
		SATS ABCD 0{frame=random(0,3);}
		SATS ### 1 A_SetScale(scale.y*1.01);
		SATS ## 1 A_SetScale(scale.y*1.002);
		SATS # 1 A_SetScale(scale.y*1.0025);
		SATS # -1;
		wait;
	}

}
